def solution(n, tops):
    dp = dict()  # 메모이제이션 딕셔너리(리스트 사용 시 시간 초과)
    # 딕셔너리 값의 0번 항은 사다리꼴을 완전히 채우는 경우의 수
    # 1번 항은 하나의 타일이 다음 사다리꼴의 영역과 겹쳐 있는 경우의 수
    # (즉, 문제에서 보여준 타일 중 2행 1열에 있는 타일을 쓰는 경우의 수)
    if tops[0] == 1:
        dp[0] = [3, 1]
    else:
        dp[0] = [2, 1]
    
    # 사다리꼴의 개수만큼 반복(단, 첫 번째는 위에서 정의했으므로 패스)
    for i in range(1, n):
        # i번째 위치까지 모든 공간이 정확히 타일로 채워진 경우의 수
        
        # 사다리꼴 위에 정삼각형이 있을 경우
        if tops[i] == 1:
            a0 = dp[i - 1][0] * 3 + dp[i - 1][1] * 2
        # 사다리꼴 위에 정삼각형이 없을 경우
        else:
            a0 = dp[i - 1][0] * 2 + dp[i - 1][1]
        
        # i번째 위치까지 타일로 채우되, 마지막 타일이 다음 사다리꼴에 겹쳐 있는 경우의 수
        a1 = dp[i - 1][0] + dp[i - 1][1]
        dp[i] = [a0 % 10007, a1 % 10007]

    return sum(dp[n - 1]) % 10007